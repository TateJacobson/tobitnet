
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #Tests for cv.tobitnet
> library(tobitnet)
> 
> set.seed(2022)
> n = 100
> p = 10
> x = vapply(1:p, function(i) rnorm(n, mean = 1, sd = 1.5), FUN.VALUE = numeric(n) )
> 
> y = 3 + x%*%c(5, 1, 2, 0.5, 0.1, rep(0, p - 5)) + rnorm(n,0,1)
> y = pmax(y, 0)
> 
> #Default arguments work
> tncv1 = cv.tobitnet(x,y)
> class(tncv1) == "cv.tobitnet"
[1] TRUE
> length(tncv1) == 8
[1] TRUE
> 
> is.numeric(tncv1$cvm)
[1] TRUE
> all(is.finite(tncv1$cvm))
[1] TRUE
> length(tncv1$cvm) == 100
[1] TRUE
> 
> is.numeric(tncv1$cvsd)
[1] TRUE
> all(is.finite(tncv1$cvsd))
[1] TRUE
> length(tncv1$cvsd) == 100
[1] TRUE
> 
> is.numeric(tncv1$lambda1)
[1] TRUE
> all(is.finite(tncv1$lambda1))
[1] TRUE
> all(tncv1$lambda1 > 0)
[1] TRUE
> length(tncv1$lambda1) == 100
[1] TRUE
> 
> tncv1$lambda2 == 0
[1] TRUE
> 
> is.numeric(tncv1$lambda1.min)
[1] TRUE
> is.finite(tncv1$lambda1.min)
[1] TRUE
> tncv1$lambda1.min > 0
[1] TRUE
> length(tncv1$lambda1.min) == 1
[1] TRUE
> 
> is.numeric(tncv1$lambda1.1se)
[1] TRUE
> is.finite(tncv1$lambda1.1se)
[1] TRUE
> tncv1$lambda1.1se > 0
[1] TRUE
> length(tncv1$lambda1.1se) == 1
[1] TRUE
> 
> #Works when x is a data frame
> x.df = data.frame(x)
> tncv1 = cv.tobitnet(x.df, y)
> class(tncv1) == "cv.tobitnet"
[1] TRUE
> length(tncv1) == 8
[1] TRUE
> 
> is.numeric(tncv1$cvm)
[1] TRUE
> all(is.finite(tncv1$cvm))
[1] TRUE
> length(tncv1$cvm) == 100
[1] TRUE
> 
> is.numeric(tncv1$cvsd)
[1] TRUE
> all(is.finite(tncv1$cvsd))
[1] TRUE
> length(tncv1$cvsd) == 100
[1] TRUE
> 
> is.numeric(tncv1$lambda1)
[1] TRUE
> all(is.finite(tncv1$lambda1))
[1] TRUE
> all(tncv1$lambda1 > 0)
[1] TRUE
> length(tncv1$lambda1) == 100
[1] TRUE
> 
> tncv1$lambda2 == 0
[1] TRUE
> 
> is.numeric(tncv1$lambda1.min)
[1] TRUE
> is.finite(tncv1$lambda1.min)
[1] TRUE
> tncv1$lambda1.min > 0
[1] TRUE
> length(tncv1$lambda1.min) == 1
[1] TRUE
> 
> is.numeric(tncv1$lambda1.1se)
[1] TRUE
> is.finite(tncv1$lambda1.1se)
[1] TRUE
> tncv1$lambda1.1se > 0
[1] TRUE
> length(tncv1$lambda1.1se) == 1
[1] TRUE
> 
> #Works with user-provided lambda1, lambda2
> tncv1 = cv.tobitnet(x,y, lambda1 = c(0.1, 0.2), lambda2 = 0.1)
> class(tncv1) == "cv.tobitnet"
[1] TRUE
> length(tncv1) == 8
[1] TRUE
> 
> is.numeric(tncv1$cvm)
[1] TRUE
> all(is.finite(tncv1$cvm))
[1] TRUE
> length(tncv1$cvm) == 2
[1] TRUE
> 
> is.numeric(tncv1$cvsd)
[1] TRUE
> all(is.finite(tncv1$cvsd))
[1] TRUE
> length(tncv1$cvsd) == 2
[1] TRUE
> 
> all.equal(tncv1$lambda1,c(0.1, 0.2))
[1] TRUE
> tncv1$lambda2 == 0.1
[1] TRUE
> 
> is.numeric(tncv1$lambda1.min)
[1] TRUE
> is.finite(tncv1$lambda1.min)
[1] TRUE
> tncv1$lambda1.min > 0
[1] TRUE
> length(tncv1$lambda1.min) == 1
[1] TRUE
> 
> is.numeric(tncv1$lambda1.1se)
[1] TRUE
> is.finite(tncv1$lambda1.1se)
[1] TRUE
> tncv1$lambda1.1se > 0
[1] TRUE
> length(tncv1$lambda1.1se) == 1
[1] TRUE
> 
> #Works with type.measure = "deviance"
> tncv1 = cv.tobitnet(x, y, lambda1 = c(0.1, 0.2), lambda2 = 0.1, type.measure = "deviance")
> class(tncv1) == "cv.tobitnet"
[1] TRUE
> length(tncv1) == 8
[1] TRUE
> 
> is.numeric(tncv1$cvm)
[1] TRUE
> all(is.finite(tncv1$cvm))
[1] TRUE
> length(tncv1$cvm) == 2
[1] TRUE
> 
> is.numeric(tncv1$cvsd)
[1] TRUE
> all(is.finite(tncv1$cvsd))
[1] TRUE
> length(tncv1$cvsd) == 2
[1] TRUE
> 
> all.equal(tncv1$lambda1,c(0.1, 0.2))
[1] TRUE
> tncv1$lambda2 == 0.1
[1] TRUE
> 
> is.numeric(tncv1$lambda1.min)
[1] TRUE
> is.finite(tncv1$lambda1.min)
[1] TRUE
> tncv1$lambda1.min > 0
[1] TRUE
> length(tncv1$lambda1.min) == 1
[1] TRUE
> 
> is.numeric(tncv1$lambda1.1se)
[1] TRUE
> is.finite(tncv1$lambda1.1se)
[1] TRUE
> tncv1$lambda1.1se > 0
[1] TRUE
> length(tncv1$lambda1.1se) == 1
[1] TRUE
> 
> #Works with type.measure = "mae
> tncv1 = cv.tobitnet(x, y, lambda1 = c(0.1, 0.2), lambda2 = 0.1, type.measure = "mae")
> class(tncv1) == "cv.tobitnet"
[1] TRUE
> length(tncv1) == 8
[1] TRUE
> 
> is.numeric(tncv1$cvm)
[1] TRUE
> all(is.finite(tncv1$cvm))
[1] TRUE
> length(tncv1$cvm) == 2
[1] TRUE
> 
> is.numeric(tncv1$cvsd)
[1] TRUE
> all(is.finite(tncv1$cvsd))
[1] TRUE
> length(tncv1$cvsd) == 2
[1] TRUE
> 
> all.equal(tncv1$lambda1,c(0.1, 0.2))
[1] TRUE
> tncv1$lambda2 == 0.1
[1] TRUE
> 
> is.numeric(tncv1$lambda1.min)
[1] TRUE
> is.finite(tncv1$lambda1.min)
[1] TRUE
> tncv1$lambda1.min > 0
[1] TRUE
> length(tncv1$lambda1.min) == 1
[1] TRUE
> 
> is.numeric(tncv1$lambda1.1se)
[1] TRUE
> is.finite(tncv1$lambda1.1se)
[1] TRUE
> tncv1$lambda1.1se > 0
[1] TRUE
> length(tncv1$lambda1.1se) == 1
[1] TRUE
> 
> #Works with different c, nfolds
> y = pmax(y,3)
> 
> tncv1 = cv.tobitnet(x, y, c = 3, lambda1 = c(0.1, 0.2), lambda2 = 0.1, nfolds = 5)
> class(tncv1) == "cv.tobitnet"
[1] TRUE
> length(tncv1) == 8
[1] TRUE
> 
> is.numeric(tncv1$cvm)
[1] TRUE
> all(is.finite(tncv1$cvm))
[1] TRUE
> length(tncv1$cvm) == 2
[1] TRUE
> 
> is.numeric(tncv1$cvsd)
[1] TRUE
> all(is.finite(tncv1$cvsd))
[1] TRUE
> length(tncv1$cvsd) == 2
[1] TRUE
> 
> all.equal(tncv1$lambda1,c(0.1, 0.2))
[1] TRUE
> tncv1$lambda2 == 0.1
[1] TRUE
> 
> is.numeric(tncv1$lambda1.min)
[1] TRUE
> is.finite(tncv1$lambda1.min)
[1] TRUE
> tncv1$lambda1.min > 0
[1] TRUE
> length(tncv1$lambda1.min) == 1
[1] TRUE
> 
> is.numeric(tncv1$lambda1.1se)
[1] TRUE
> is.finite(tncv1$lambda1.1se)
[1] TRUE
> tncv1$lambda1.1se > 0
[1] TRUE
> length(tncv1$lambda1.1se) == 1
[1] TRUE
> 
> #Works with constant column in some folds
> tncv1 = cv.tobitnet(cbind(c(rep(1, n-1) ,0), x) , y, c = 3, lambda1 = c(0.1, 0.2), lambda2 = 0.1, nfolds = 5)
> class(tncv1) == "cv.tobitnet"
[1] TRUE
> length(tncv1) == 8
[1] TRUE
> 
> is.numeric(tncv1$cvm)
[1] TRUE
> all(is.finite(tncv1$cvm))
[1] TRUE
> length(tncv1$cvm) == 2
[1] TRUE
> 
> is.numeric(tncv1$cvsd)
[1] TRUE
> all(is.finite(tncv1$cvsd))
[1] TRUE
> length(tncv1$cvsd) == 2
[1] TRUE
> 
> all.equal(tncv1$lambda1,c(0.1, 0.2))
[1] TRUE
> tncv1$lambda2 == 0.1
[1] TRUE
> 
> is.numeric(tncv1$lambda1.min)
[1] TRUE
> is.finite(tncv1$lambda1.min)
[1] TRUE
> tncv1$lambda1.min > 0
[1] TRUE
> length(tncv1$lambda1.min) == 1
[1] TRUE
> 
> is.numeric(tncv1$lambda1.1se)
[1] TRUE
> is.finite(tncv1$lambda1.1se)
[1] TRUE
> tncv1$lambda1.1se > 0
[1] TRUE
> length(tncv1$lambda1.1se) == 1
[1] TRUE
> 
> proc.time()
   user  system elapsed 
  2.794   0.030   3.065 

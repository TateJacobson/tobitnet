
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #Tests for predict.tobitscad
> library(tobitnet)
> 
> set.seed(2022)
> n = 100
> p = 10
> x = vapply(1:p, function(i) rnorm(n, mean = 1, sd = 1.5), FUN.VALUE = numeric(n) )
> x.test = vapply(1:p, function(i) rnorm(n, mean = 1, sd = 1.5), FUN.VALUE = numeric(n) )
> 
> y = -5 + x%*%c(5, 1, 2, 0.5, 0.1, rep(0, p - 5)) + rnorm(n,0,1)
> y = pmax(y, 1)
> 
> tsout1 = tobitscad(x = x, y = y, c = 1)
> 
> #Default arguments work
> tsout_pred1 = predict(tsout1, newx = x.test)
> 
> #Output is as expected
> is.numeric(tsout_pred1)
[1] TRUE
> all( is.finite(tsout_pred1) )
[1] TRUE
> nrow(tsout_pred1) == nrow(x.test)
[1] TRUE
> ncol(tsout_pred1) == length(tsout1$lambda)
[1] TRUE
> #c from tobitnet passes to predict.tobitnet
> min(tsout_pred1) == 1
[1] TRUE
> 
> #Accepts a new lambda1
> tsout_pred2 = predict(tsout1, newx = x.test, lambda = c(0.1,0.5))
> is.numeric(tsout_pred2)
[1] TRUE
> nrow(tsout_pred2) == nrow(x.test)
[1] TRUE
> ncol(tsout_pred2) == 2
[1] TRUE
> 
> #type = "uncensored" works
> tsout_pred2 = predict(tsout1, newx = x.test, lambda = c(0.1,0.5), type = "uncensored")
> is.numeric(tsout_pred2)
[1] TRUE
> nrow(tsout_pred2) == nrow(x.test)
[1] TRUE
> ncol(tsout_pred2) == 2
[1] TRUE
> #Predicted values can fall below c = 1
> min(tsout_pred2) < 1
[1] TRUE
> 
> #Including an intercept column does not impact results
> tsout1b = tobitscad(x = cbind(rep(1,n) ,x), y = y, c = 1)
> 
> tsout_pred1 = predict(tsout1, newx = x)
> tsout_pred1b = predict(tsout1b, newx = cbind(rep(1,n) ,x))
> all.equal(tsout_pred1, tsout_pred1b)
[1] TRUE
> all.equal(dim(tsout_pred1), c(n, 100))
[1] TRUE
> all.equal(dim(tsout_pred1), dim(tsout_pred1b))
[1] TRUE
> 
> #Accepts a vector for newx
> x.vec = rnorm(10, 1, 1.5)
> tsout_pred2 = predict(tsout1, newx = x.vec)
> is.numeric(tsout_pred2)
[1] TRUE
> nrow(tsout_pred2) == 1
[1] TRUE
> ncol(tsout_pred2) == length(tsout1$lambda)
[1] TRUE
> 
> proc.time()
   user  system elapsed 
  0.739   0.050   0.922 
